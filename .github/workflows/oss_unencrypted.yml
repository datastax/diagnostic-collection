name: OSS ITs no encryption
on:
  push:
    branches:
      - master
  pull_request_target:
    types: [labeled]

jobs:
  integration-tests:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Compress the collector
      run: |
          tar czf diagnostic-collection.tar.gz ./*
    - uses: webfactory/ssh-agent@v0.4.1
      with:
          ssh-private-key: ${{ secrets.TLP_CLUSTER_KEY }}
    - name: Install dependencies
      run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install --upgrade pip
          pip install behave
          sudo apt-get update
          sudo apt-get install openjdk-8-jre -y
          curl -1sLf 'https://dl.cloudsmith.io/public/thelastpickle/tlp-cluster/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y tlp-cluster
          mkdir -p /home/runner/.tlp-cluster/profiles/default
          sudo apt-get install     apt-transport-https     ca-certificates     curl     gnupg-agent     software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo usermod -aG docker ${USER}
          sudo apt-get install awscli
          # No clue why we need to pull these manually now...
          docker pull hashicorp/terraform:0.11.15
          docker pull thelastpickle/pssh:1.0
          docker pull thelastpickle/cassandra-build:1.0
    - name: Configure tlp-cluster
      if: ${{ success() }}
      env:
        TLP_CLUSTER_KEY: ${{ secrets.TLP_CLUSTER_KEY }}
        TLP_CLUSTER_SETTINGS: ${{ secrets.TLP_CLUSTER_SETTINGS }}
        COLLECTOR_ENCRYPTION_KEY: ${{ secrets.COLLECTOR_ENCRYPTION_KEY }}
      run: |
          set -e
          if [[ -n "${TLP_CLUSTER_KEY}" ]];
          then
            printf "%s" "${TLP_CLUSTER_SETTINGS}" > /home/runner/.tlp-cluster/profiles/default/settings.yaml
            printf "%s" "${TLP_CLUSTER_KEY}" > /home/runner/.tlp-cluster/profiles/default/secret.pem
            printf "%s" "${COLLECTOR_ENCRYPTION_KEY}" > /home/runner/encryption.key
          fi
          chmod 600 /home/runner/.tlp-cluster/profiles/default/secret.pem

    - name: Spin up cluster
      if: ${{ success() }}
      run: |
          echo "Initializing AWS cluster..."
          timeout --foreground 120 tlp-cluster init DS DSI-58 "Integration tests for the DS diagnostic toolkit" -c 3 --instance m5.large > /dev/null 2>&1
          echo "Spinning up EC2 instances..."
          timeout --foreground 120 tlp-cluster up --auto-approve > /dev/null 2>&1
          timeout --foreground 180 tlp-cluster use 3.11.7 --config "cluster_name:diag_integration_tests" > /dev/null 2>&1
          echo "Installing packages..."
          timeout --foreground 600 tlp-cluster install > install.log 2>&1 || echo "meh... install phase seem to have failed"
          echo "Starting Cassandra..."
          timeout --foreground 600 tlp-cluster start > start.log 2>&1 || echo "meh... start phase seem to have failed"
 
    - name: Run diagnostics collection
      if: ${{ success() }}
      env:
        DS_AWS_KEY: ${{ secrets.S3_AWS_KEY }}
        DS_AWS_SECRET: ${{ secrets.S3_AWS_SECRET }}
      run: |
          shopt -s expand_aliases || setopt aliases
          source env.sh
          scp -F sshConfig diagnostic-collection.tar.gz cassandra0:/home/ubuntu
          scp -F sshConfig /home/runner/encryption.key cassandra0:/home/ubuntu
          echo "Running the diagnostic collection..."
          c0 "tar xvf diagnostic-collection.tar.gz && ./collect_diag.sh -t coss -r -m extended -u 900 -e /home/ubuntu/encryption.key -K ${DS_AWS_KEY} -S ${DS_AWS_SECRET} -B collector-dead-drop-test -T DSI-${GITHUB_RUN_NUMBER}" > diag.log 2>&1
          diag_tarball_path=$(grep "Complete diagnostics tarball is in" diag.log| cut -d'/' -f3)
          diag_tarball_name=$(grep "Complete diagnostics tarball is in" diag.log| cut -d'/' -f4)
          grep "Complete diagnostics tarball is in" diag.log
          scp -F sshConfig cassandra0:/tmp/$diag_tarball_path/$diag_tarball_name .
          tar xvf $diag_tarball_name > extract.log 2>&1
          diag_directory=$(tail -1 extract.log | cut -d'/' -f1)
          cd $diag_directory
          full_diag_dir=$(pwd)
          . ../venv/bin/activate
          echo "Running checks..."
          behave ../tests/integration/features -D artifacts-directory=$full_diag_dir
          openssl version

    - name: Check artifacts presence in S3
      if: ${{ success() }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_AWS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_AWS_SECRET }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
          set +e
          set -x
          # Check that artifacts were uploaded to S3
          aws s3 ls s3://collector-dead-drop-test/DSI-${GITHUB_RUN_NUMBER} --recursive
          artifacts=$(aws s3 ls s3://collector-dead-drop-test/DSI-${GITHUB_RUN_NUMBER} --recursive | grep tar.gz.enc)
          if [[ "$?" == 0 ]]; then
            echo "Artifacts were successfully uploaded to S3"
          else
            echo "Couldn't find artifacts in S3. Failing CI run."
            exit 2
          fi

          # Check if the completion marker is present
          marker=$(aws s3 ls s3://collector-dead-drop-test/DSI-${GITHUB_RUN_NUMBER} --recursive | grep collector_upload)
          if [[ "$?" == 0 ]]; then
            echo "The completion marker is present alongside the artefacts"
          else
            echo "The completion marker was not presen alongside the artefacts"
            exit 3
          fi

    - name: Tear down
      if: ${{ always() }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_AWS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_AWS_SECRET }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
          echo "Cleaning up the test bucket..."
          aws s3 rm --recursive s3://collector-dead-drop-test/DSI-${GITHUB_RUN_NUMBER} || true
          echo "Terminating instances, please be patient..."
          timeout --foreground 600 tlp-cluster down --auto-approve > down.log 2>&1
          tail -10 down.log
